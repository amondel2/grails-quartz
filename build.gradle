import org.grails.gradle.plugin.doc.PublishGuideTask

buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        mavenCentral()
    }
    dependencies {
        classpath "org.grails.grails-doc:org.grails.grails-doc.gradle.plugin:$grailsVersion"
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    }
}

plugins {
    id "java-library"
    id "eclipse"
    id "idea"
}


version =  projectVersion
group = 'org.grails.plugins'

apply plugin: "org.grails.grails-plugin"
apply plugin: 'org.grails.grails-doc'
apply plugin: 'org.grails.grails-publish'


repositories {
  mavenLocal()
  mavenCentral()
  maven { url = 'https://repo.grails.org/grails/core' }
}

compileJava {
    options.release = 17
}

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {

    api "org.quartz-scheduler:quartz:$quartzVersion"

    implementation "org.grails:grails-bootstrap"
    implementation "org.grails:grails-core"
    implementation "org.apache.groovy:groovy-sql"
    implementation "org.springframework:spring-beans"
    implementation "org.springframework:spring-context"
    implementation "org.springframework:spring-context-support"
    compileOnly "org.apache.groovy:groovy"
    compileOnly "jakarta.annotation:jakarta.annotation-api"

    testImplementation "org.spockframework:spock-core"

    testRuntimeOnly "org.slf4j:slf4j-nop:$slf4jVersion" // Get rid of warning about missing slf4j implementation during test task
}

jar {
    exclude "application.groovy"
    exclude "src/test/projects/**"
}

test {
    useJUnitPlatform()
}


configurations.register('groovydocConfiguration')
configurations.register('guideConfiguration')

dependencies {

    groovydocConfiguration localGroovy(), {
        because 'groovydoc needs to run with the same version as Gradle'
    }

    guideConfiguration "org.grails:grails-docs"
    guideConfiguration "org.apache.groovy:groovy-templates"
}

tasks.withType(Groovydoc).configureEach {
    access = GroovydocAccess.PRIVATE
    processScripts = false
    includeMainForScripts = false
    includeAuthor = true
    classpath = configurations.groovydocConfiguration
    groovyClasspath = configurations.groovydocConfiguration
}

tasks.withType(PublishGuideTask).configureEach {
    classpath = configurations.guideConfiguration
}

grailsPublish {
    githubSlug = 'grails/grails-quartz'
    license {
        name = 'Apache-2.0'
    }
    title = 'Grails Quartz Plugin'
    desc = 'This plugin allows your Grails application to schedule jobs to be executed using a specified interval or cron expression.'
    developers = ['burtbeckwith': 'Burt Beckwith', 'jeffscottbrown': 'Jeff Scott Brown', 'graemerocher': 'Graeme Rocher',
                  'ryanvanderwerf':'Ryan Vanderwerf','sergeynebolsin': 'Sergey Nebolsin', 'puneetbehl': 'Puneet Behl',
                  'vitaliisamolovskikh':'Vitalii Samolovskikh']
}